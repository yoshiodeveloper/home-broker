// Code generated by MockGen. DO NOT EDIT.
// Source: ./wallets/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	money "home-broker/money"
	users "home-broker/users"
	wallets "home-broker/wallets"
	reflect "reflect"
)

// MockWalletDBInterface is a mock of WalletDBInterface interface
type MockWalletDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWalletDBInterfaceMockRecorder
}

// MockWalletDBInterfaceMockRecorder is the mock recorder for MockWalletDBInterface
type MockWalletDBInterfaceMockRecorder struct {
	mock *MockWalletDBInterface
}

// NewMockWalletDBInterface creates a new mock instance
func NewMockWalletDBInterface(ctrl *gomock.Controller) *MockWalletDBInterface {
	mock := &MockWalletDBInterface{ctrl: ctrl}
	mock.recorder = &MockWalletDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletDBInterface) EXPECT() *MockWalletDBInterfaceMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method
func (m *MockWalletDBInterface) GetByUserID(userID users.UserID) (*wallets.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].(*wallets.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID
func (mr *MockWalletDBInterfaceMockRecorder) GetByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockWalletDBInterface)(nil).GetByUserID), userID)
}

// Insert mocks base method
func (m *MockWalletDBInterface) Insert(entity wallets.Wallet) (*wallets.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", entity)
	ret0, _ := ret[0].(*wallets.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockWalletDBInterfaceMockRecorder) Insert(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWalletDBInterface)(nil).Insert), entity)
}

// IncBalanceByUserID mocks base method
func (m *MockWalletDBInterface) IncBalanceByUserID(userID users.UserID, amount money.Money) (*wallets.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncBalanceByUserID", userID, amount)
	ret0, _ := ret[0].(*wallets.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncBalanceByUserID indicates an expected call of IncBalanceByUserID
func (mr *MockWalletDBInterfaceMockRecorder) IncBalanceByUserID(userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncBalanceByUserID", reflect.TypeOf((*MockWalletDBInterface)(nil).IncBalanceByUserID), userID, amount)
}
