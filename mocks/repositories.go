// Code generated by MockGen. DO NOT EDIT.
// Source: home-broker/infra (interfaces: RepositoryI,UserRepoI,WalletRepoI)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "home-broker/domain"
	reflect "reflect"
)

// MockRepositoryI is a mock of RepositoryI interface
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// MockUserRepoI is a mock of UserRepoI interface
type MockUserRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoIMockRecorder
}

// MockUserRepoIMockRecorder is the mock recorder for MockUserRepoI
type MockUserRepoIMockRecorder struct {
	mock *MockUserRepoI
}

// NewMockUserRepoI creates a new mock instance
func NewMockUserRepoI(ctrl *gomock.Controller) *MockUserRepoI {
	mock := &MockUserRepoI{ctrl: ctrl}
	mock.recorder = &MockUserRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepoI) EXPECT() *MockUserRepoIMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockUserRepoI) GetByID(arg0 domain.UserID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserRepoIMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepoI)(nil).GetByID), arg0)
}

// Insert mocks base method
func (m *MockUserRepoI) Insert(arg0 domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockUserRepoIMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepoI)(nil).Insert), arg0)
}

// MockWalletRepoI is a mock of WalletRepoI interface
type MockWalletRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoIMockRecorder
}

// MockWalletRepoIMockRecorder is the mock recorder for MockWalletRepoI
type MockWalletRepoIMockRecorder struct {
	mock *MockWalletRepoI
}

// NewMockWalletRepoI creates a new mock instance
func NewMockWalletRepoI(ctrl *gomock.Controller) *MockWalletRepoI {
	mock := &MockWalletRepoI{ctrl: ctrl}
	mock.recorder = &MockWalletRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletRepoI) EXPECT() *MockWalletRepoIMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method
func (m *MockWalletRepoI) GetByUserID(arg0 domain.UserID) (*domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0)
	ret0, _ := ret[0].(*domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID
func (mr *MockWalletRepoIMockRecorder) GetByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockWalletRepoI)(nil).GetByUserID), arg0)
}

// Insert mocks base method
func (m *MockWalletRepoI) Insert(arg0 domain.Wallet) (*domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockWalletRepoIMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWalletRepoI)(nil).Insert), arg0)
}
