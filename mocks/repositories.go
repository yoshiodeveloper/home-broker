// Code generated by MockGen. DO NOT EDIT.
// Source: infra/repositories.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "home-broker/domain"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// MockUserRepo is a mock of UserRepo interface
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockUserRepo) GetByID(id domain.UserID) (domain.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserRepoMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepo)(nil).GetByID), id)
}

// Insert mocks base method
func (m *MockUserRepo) Insert(user domain.User) domain.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(domain.User)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockUserRepoMockRecorder) Insert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepo)(nil).Insert), user)
}

// MockWalletRepo is a mock of WalletRepo interface
type MockWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoMockRecorder
}

// MockWalletRepoMockRecorder is the mock recorder for MockWalletRepo
type MockWalletRepoMockRecorder struct {
	mock *MockWalletRepo
}

// NewMockWalletRepo creates a new mock instance
func NewMockWalletRepo(ctrl *gomock.Controller) *MockWalletRepo {
	mock := &MockWalletRepo{ctrl: ctrl}
	mock.recorder = &MockWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletRepo) EXPECT() *MockWalletRepoMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method
func (m *MockWalletRepo) GetByUserID(id domain.UserID) (domain.Wallet, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", id)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID
func (mr *MockWalletRepoMockRecorder) GetByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockWalletRepo)(nil).GetByUserID), id)
}

// Insert mocks base method
func (m *MockWalletRepo) Insert(wallet domain.Wallet) domain.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", wallet)
	ret0, _ := ret[0].(domain.Wallet)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockWalletRepoMockRecorder) Insert(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWalletRepo)(nil).Insert), wallet)
}
